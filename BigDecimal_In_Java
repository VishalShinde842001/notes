
### Complete BigDecimal Topics: Basic to Advanced

==================================================================================================================
#### 1. Basics of BigDecimal
- Why BigDecimal: Solves precision issues in float/double, used in financial and scientific calculations.
- Creation:
  - From String, int, long, double, BigInteger.
  - Preferred: Use String to avoid precision errors.
- Immutability: Understand how BigDecimal creates new objects for every operation.

-------------------------------------------------------------------------------------------------------------------
1)BigDecimal is not a primitive data type but it is simply as class from java.math package
2)The main advantage of BigDecimal is that for accurate calculation for very small to very large numbers 
3)BigDecimal is thread safe
4)There are two ways to create object of BigDecimal , First by new keyword 
 BigDecimal first=new BigDecimal("1000") where in parameter we can put any type of data but it must be a number "1000vis" is not valid but "1000" is valid
second by using valueOf method --> BigDecimal second=BigDecimal.valueOf(1000L) but by using this in this case we need to pass the value from parameter that must be of type long,double,int
by second case you can do one more thing ,we can pass scale as second parameter , so while forming that number scale will applied to that number
for eg BigDecimal first=BigDecimal.valueOf(1000,3)====>1.000 , BigDecimal second=BigDecimal.valueOf(100,4)===>0.0100
===================================================================================================================
#### 2. Arithmetic Operations
- Basic: add(), subtract(), multiply(), divide().
- Division Handling: Non-terminating decimals using divide() with RoundingMode.
- Modulo: remainder() and divideAndRemainder().
-------------------------------------------------------------------------------------------------------------------
There are lots of operations can be done on BigDecimal for eg add(), subtract(), multiply(), divide(), remainder(), mod(), pow(), sqrt(), setScale(), abs(), negate(), compareTo(), equals(), intValue(), longValue(), doubleValue(), toBigInteger(), toPlainString(), toString(), movePointLeft(), movePointRight(), stripTrailingZeros(), round(), scale(), precision(), hashCode(), signum()

As we know there functionality is same as they are looking 

1)abs() and negate()
=>Simply remove negation and negate simply add negation()
=>If number is negative and negate() applied then it will make it possitive
=>abs() simply remove negative sign if present and if positive then nothing will do

2)compareTo()
=>a.compareTo(b) will return -1 if a is smaller and 1 if a is bigger if both are same but scalling is diffet tehn als oreturn 0
=> 100 and 100.00 will return 0 

3)scale()
=>scale method simply provide the count of number of digits present to right side of the decimal points

4)equals()
==>equals method check whether given is equal or not simply check scalling also

5)doubleValue() , intValue() 
=>This method simply give the values in that fomrat

6)toPlainString() and toString()
=>As i convert any number to string or to plainstring 
=>In case of String sometimes it can convert number like scientific notitation 1E+7 liek this 
=>But in case of plainString it will provide complete number

7)stripTrailingZeros() 
=>Simply remove extra zeros from right side of decimal point
=>1000.000000 convert to 1000

8)setScale()


===================================================================================================================
#### 3. Scale and Precision
- Scale: Number of digits after the decimal point.
  - Adjust using setScale(scale, RoundingMode).
- Precision: Total significant digits.
  - Manage with MathContext.
- Dynamic Scaling: Adjusting decimals for variable-length operations.
===================================================================================================================
#### 4. Rounding Modes
- Supported Modes: HALF_UP, HALF_DOWN, HALF_EVEN, CEILING, FLOOR, etc.
- Use Case: Financial systems prefer HALF_EVEN for neutral rounding.
===================================================================================================================
#### 5. Comparison
- Methods:
  - compareTo() for logical comparison (ignores scale).
  - equals() for strict equality (includes scale).
- Best Practice: Use compareTo() in financial systems.
===================================================================================================================
#### 6. Conversions
- Convert BigDecimal to:
  - Primitives: doubleValue(), intValue(), etc. (may lose precision).
  - Strings: toString(), toPlainString(), toEngineeringString().
  - BigInteger: toBigInteger().
- Convert from String, double, or int.
===================================================================================================================
#### 7. Formatting
- Use DecimalFormat and NumberFormat for locale-aware formatting.
- Custom patterns for currency and scientific notations.

#### 8. Advanced Operations
- MathContext: Control precision across operations.
- Exponents:
  - Power: pow(int).
  - Logarithmic and factorial (custom implementations).
- Truncation and adjustment:
  - Remove trailing zeroes with stripTrailingZeros().

#### 9. Performance Optimization
- Avoid creating unnecessary BigDecimal objects:
  - Cache frequently used constants like BigDecimal.ZERO, ONE, TEN.
- Memory overhead for high-precision operations.

#### 10. Persistence and Serialization
- Database Mapping:
  - Use DECIMAL or NUMERIC types with proper scale and precision.
  - Hibernate mappings for BigDecimal fields.
- JSON Serialization:
  - Handle using libraries like Jackson (@JsonDeserialize, @JsonSerialize).

#### 11. Integration with Libraries
- Hibernate: BigDecimal for ORM mappings.
- JSON (Jackson, Gson): Proper serialization/deserialization.
- Spring Boot: Handling BigDecimal in REST APIs and validation.

#### 12. Testing and Debugging
- Test edge cases:
  - Scale mismatch, division by zero, large numbers.
- Use compareTo() assertions for equality tests.

#### 13. Real-World Use Cases
- Financial Systems:
  - Currency conversions, tax calculations, interest computation.
- Scientific Calculations:
  - High-precision physics or engineering simulations.
- Data Processing:
  - Precision-critical large datasets (e.g., analytics).

#### 14. Alternatives and Industry Tips
- Alternatives:
  - BigInteger for integers.
  - External libraries for arbitrary precision (e.g., Apache Commons Math).
- Industry Practices:
  - Always specify MathContext and RoundingMode to avoid ArithmeticException.
  - Log BigDecimal values with scale and precision details.

This simplified format makes it easier to copy and refer to while ensuring completeness. Let me know if you need examples or deeper explanations for any topic!